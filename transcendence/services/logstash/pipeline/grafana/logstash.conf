input {
    gelf {
        id => "grafana"
        type => docker
        # may need to specify udp port because TLS protected input could cause problems when using gelf
        port_udp => 12201
        codec => json
    }
}
#"^logger=%{LONGWORD:logger} t=%{TIMESTAMP_ISO8601:timestamp} level=%{LOGLEVEL:level} msg=\\['\"]%{DATA:msg}\\['\"] pluginId=\\['\"]%{DATA:pluginId}\\['\"]$", 
#"^logger=%{LONGWORD:logger} t=%{TIMESTAMP_ISO8601:timestamp} level=%{LOGLEVEL:level} msg=\\['\"]%{DATA:msg}\\['\"] id=\\['\"]%{DATA:id}\\['\"] duration=%{DATA:duration}$",
#"^logger=%{LONGWORD:logger} t=%{TIMESTAMP_ISO8601:timestamp} level=%{LOGLEVEL:leve} msg=\\['\"]%{DATA:msg}\\['\"] id=\\['\"]%{DATA:id}\\['\"]$",
#"^logger=%{LONGWORD:logger} t=%{TIMESTAMP_ISO8601:timestamp} level=%{LOGLEVEL:leve} msg=\\['\"]%{DATA:msg}\\['\"]$"

# ECS expects host value to be an object, errs when its a concrete value (probably string)
# ECS has a host name field, 
# Reference:
# https://discuss.elastic.co/t/problem-with-transfer-filebeat-6-1-3-logstash-6-1-3-elasticsearch-6-1-3/136264/4
filter {
    mutate {
        rename => {"[host]" => "[host][name]"}
    }
}

        # match any sequence of non-whitespace chars
        #patterns_dir => ["./patterns"]
        #keep_empty_captures => true
# Reference for grok text patterns: https://github.com/elastic/logstash/blob/v1.4.0/patterns/grok-patterns
#filter {
#    grok {
#        break_on_match => true
#        #ecs_compatibility => false
#        pattern_definitions => {
#            "LONGWORD" => "([^\s]+)"
#        }
#        match => {
#            'message' => [
#                '^logger=%{LONGWORD:logger} t=%{TIMESTAMP_ISO8601:time} level=%{LOGLEVEL:level} msg=\\"%{DATA:msg}\\"',
#                '^logger=%{LONGWORD:logger} t=%{TIMESTAMP_ISO8601:time} level=%{LOGLEVEL:level} msg=\\"%{DATA:msg}\\" id=\\"%{DATA:id}\\"$',
#                '^logger=%{LONGWORD:logger} t=%{TIMESTAMP_ISO8601:time} level=%{LOGLEVEL:level} msg=\\"%{DATA:msg}\\" id=\\"%{DATA:id}\\" duration=%{DATA:duration}$',
#                '^logger=%{LONGWORD:logger} userId=%{NUMBER:userId} orgId=%{NUMBER:orgId} uname=%{WORD:uname} t=%{TIMESTAMP_ISO8601:time} level=%{LOGLEVEL:level} msg=\\"%{DATA:msg}\\" method=%{WORD:method} path=%{PATH:path} 
#            ]
#        }
#    }
#}

output {
    elasticsearch {
        hosts => ["https://elasticsearch:9200"]
        # If user and password not set, error:
        # Elasticsearch main endpoint returns 401: Missing authentication credentials for REST request
        user => "elastic"
        # Without double quotes surrounding env vars, the password expand to nothing, resulting in
        # missing authentication credentials again
        password => "${ELASTIC_PASSWORD}"
        ssl_enabled => true
        ssl_certificate => "/certs/logstash.crt"
        # If key is in wrong format (eg rsa private key), logstash will throw InvalidKeyException
        ssl_key => "/certs/logstash.pkcs8.key"
        ssl_certificate_authorities => ["/etc/ssl/certs/ca.crt"]

        script_type => "inline"
        index => "grafana-%{+YYYY.MM.dd}"  # Index pattern
        ecs_compatibility => v8
    }
}
